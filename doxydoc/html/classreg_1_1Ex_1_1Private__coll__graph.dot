digraph "reg::Ex::Private"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{reg::Ex::Private\n||+ Private()\l+ compile()\l+ matchAt()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +error" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{bool\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +data" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{std::vector\< reg::PToken \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{reg::PToken\n||+ kindStr()\l+ PToken()\l+ PToken()\l+ PToken()\l+ PToken()\l+ PToken()\l+ setValue()\l+ kind()\l+ from()\l+ to()\l+ value()\l+ asciiValue()\l+ isRange()\l+ isCharClass()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classreg_1_1PToken.html",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" +pattern" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{std::string\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{std::basic_string\<\l Char \>\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",tooltip=" "];
}
